(defun range (start end)
	   (if (> start end)
	       nil
	       (cons start (range (+ start 1) end))))

(defun filter (fn lst)
	   (mapcan #'(lambda (x) (and (funcall fn x) (list x)))
		   lst))

(defun divides-p (x y)
	   "does y divide x without remainder?"
	   (= (mod x y) 0))


;;problem 1

(defun prob1 ()
"If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000."
	   (reduce #'+ (filter (lambda (x) (or (divides-p x 3)
					       (divides-p x 5))) 
			       (range 0 999))))


;;problem 2

(defun fib (n)
	   (if (<= n 1)
	       1
	       (+ (fib (- n 1)) 
		  (fib (- n 2)))))



(defun do-prob2 (n acc)
	   (let ((val (fib n)))
	     (if (> val 4000000)
		 acc
		 (do-prob2 (+ n 1) (if (evenp val) 
					(+ acc val) 
					acc)))))

(defun prob2 ()
"Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not exceed four million."
 (do-prob2 1 0))

;; problem 3

(defun prime-p (n)
	   (labels ((loupe (x)
		      (if (> x (sqrt n))
			  t
			  (if (divides-p n x)
			      nil
			      (loupe (+ x 1))))))
	     (loupe 2)))


(defun next-prime (n)
	   (if (prime-p (+ n 1))
	       (+ n 1)
	       (next-prime (+ n 1))))

(defun largest-prime-divider (n)
	   (labels ((loupe (p old)
		      (if (> p (sqrt n))
			  old
			  (if (divides-p n p)
			      (loupe (next-prime p) p)
			      (loupe (next-prime p) old)))))
	     (loupe 2 2)))

(defun prob3 ()
"The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?"
 (largest-prime-divider 600851475143))


(defun last1 (lst)
  (car (last lst)))

(defun palin-p (lst)
  (if (equal nil lst)
  t
  (let ((start (first lst)) (finish (last1 lst)))
    (if (equal start finish)
    (palin-p (rest (butlast lst)))
    nil))))

(defun str-palin-p (str)
  (palin-p (coerce str 'list)))

(defun next-palin (n)
	   (let ((next (- n 1)))
	     (if (< next 1) 
		 nil
		 (if 
		  (str-palin-p (format nil "~a" next))
		  next
		  (next-palin next)))))

(defun which-divides (n lst)
  (if (null lst)
      (values nil nil)
      (if (divides-p n (car lst))
	  (values (car lst) (/ n (car lst)))
	  (which-divides n (cdr lst)))))

(defun within (n min max)
	   (and (>= n min) (<= n max)))

(defun largest-palin (min max)
	   (let ((next (next-palin (* max max))))
	     (labels ((loupe (n)
			(multiple-value-bind (x y)
			    (which-divides n (reverse (range min max)))
			  (if (and x y (within x min max)
				   (within y min max))
			      n
			      (loupe (next-palin n))))))
	       (loupe next))))

(defun prob4()
"A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers."
(largest-palin 100 999))


(defun smallest-divided-number (lst)
  (labels ((loupe (n)
	     (if (every #'(lambda (x)
			    (divides-p n x))
			lst)
		 n
		 (loupe (1+ n)))))
    (loupe 1)))

(defun prob5()
  "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?"
  (smallest-divided-number (range 1 20)))



(defun prob6()
  "The sum of the squares of the first ten natural numbers is,
1^(2) + 2^(2) + ... + 10^(2) = 385

The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)^(2) = 55^(2) = 3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.")


(defun nth-prime(n)
  (labels ((loupe (prime count)
	     (if (= count n)
		 prime
		 (loupe (next-prime prime) (1+ count)))))
    (loupe 2 1)))

(defun prob7()
  "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6^(th) prime is 13.

What is the 10001^(st) prime number?"
  (nth-prime 10001))